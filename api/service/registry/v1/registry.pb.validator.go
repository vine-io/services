// Code generated by proto-gen-validator. DO NOT EDIT.
// source: github.com/vine-io/services/api/service/registry/v1/registry.proto

package registry

import (
	fmt "fmt"
	is "github.com/vine-io/vine/util/is"
)

func (m *EmptyResponse) Validate() error {
	return m.ValidateE("")
}

func (m *EmptyResponse) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *GetRequest) Validate() error {
	return m.ValidateE("")
}

func (m *GetRequest) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *GetResponse) Validate() error {
	return m.ValidateE("")
}

func (m *GetResponse) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ListRequest) Validate() error {
	return m.ValidateE("")
}

func (m *ListRequest) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ListResponse) Validate() error {
	return m.ValidateE("")
}

func (m *ListResponse) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *WatchRequest) Validate() error {
	return m.ValidateE("")
}

func (m *WatchRequest) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Service) Validate() error {
	return m.ValidateE("")
}

func (m *Service) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Node) Validate() error {
	return m.ValidateE("")
}

func (m *Node) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Endpoint) Validate() error {
	return m.ValidateE("")
}

func (m *Endpoint) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Value) Validate() error {
	return m.ValidateE("")
}

func (m *Value) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Options) Validate() error {
	return m.ValidateE("")
}

func (m *Options) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Result) Validate() error {
	return m.ValidateE("")
}

func (m *Result) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Event) Validate() error {
	return m.ValidateE("")
}

func (m *Event) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int32(m.Type) != 0 {
		if !is.In([]int32{0, 1, 2}, int32(m.Type)) {
			errs = append(errs, fmt.Errorf("field '%stype' must in '[0, 1, 2]'", prefix))
		}
	}
	return is.MargeErr(errs...)
}

func (m *OpenAPI) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPI) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIServer) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIServer) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIInfo) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIInfo) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIContact) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIContact) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPILicense) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPILicense) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPITag) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPITag) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIExternalDocs) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIExternalDocs) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIPath) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIPath) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIPathDocs) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIPathDocs) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PathSecurity) Validate() error {
	return m.ValidateE("")
}

func (m *PathSecurity) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PathParameters) Validate() error {
	return m.ValidateE("")
}

func (m *PathParameters) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PathRequestBody) Validate() error {
	return m.ValidateE("")
}

func (m *PathRequestBody) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PathRequestBodyContent) Validate() error {
	return m.ValidateE("")
}

func (m *PathRequestBodyContent) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ApplicationContent) Validate() error {
	return m.ValidateE("")
}

func (m *ApplicationContent) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PathResponse) Validate() error {
	return m.ValidateE("")
}

func (m *PathResponse) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *OpenAPIComponents) Validate() error {
	return m.ValidateE("")
}

func (m *OpenAPIComponents) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *SecuritySchemes) Validate() error {
	return m.ValidateE("")
}

func (m *SecuritySchemes) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *BasicSecurity) Validate() error {
	return m.ValidateE("")
}

func (m *BasicSecurity) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *APIKeysSecurity) Validate() error {
	return m.ValidateE("")
}

func (m *APIKeysSecurity) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *BearerSecurity) Validate() error {
	return m.ValidateE("")
}

func (m *BearerSecurity) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Model) Validate() error {
	return m.ValidateE("")
}

func (m *Model) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Schema) Validate() error {
	return m.ValidateE("")
}

func (m *Schema) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/vine-io/services/proto/service/apiserver/v1/apiserver.proto

package apiserverv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	client "github.com/vine-io/vine/core/client"
	server "github.com/vine-io/vine/core/server"
	api "github.com/vine-io/vine/lib/api"
	apipb "github.com/vine-io/vine/proto/apis/api"
	openapi "github.com/vine-io/vine/proto/apis/openapi"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for APIServerService service
func NewAPIServerServiceEndpoints() []*apipb.Endpoint {
	return []*apipb.Endpoint{
		&apipb.Endpoint{
			Name:        "APIServerService.Healthz",
			Description: "APIServerService.Healthz",
			Path:        []string{"/api/v1/healthz"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "APIServerService.GetIP",
			Description: "APIServerService.GetIP",
			Path:        []string{"/api/v1/getIP"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
	}
}

// Swagger OpenAPI 3.0 for APIServerService service
func NewAPIServerServiceOpenAPI() *openapi.OpenAPI {
	return &openapi.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapi.OpenAPIInfo{
			Title:       "APIServerServiceService",
			Description: "OpenAPI3.0 for APIServerService",
			Version:     "v1.0.0",
		},
		Servers: []*openapi.OpenAPIServer{},
		Tags: []*openapi.OpenAPITag{
			&openapi.OpenAPITag{
				Name:        "APIServerService",
				Description: "OpenAPI3.0 for APIServerService",
			},
		},
		Paths: map[string]*openapi.OpenAPIPath{
			"/api/v1/getIP": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"APIServerService"},
					Description: "APIServerService GetIP",
					OperationId: "APIServerServiceGetIP",
					Parameters:  []*openapi.PathParameters{},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.IPRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/healthz": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"APIServerService"},
					Description: "APIServerService Healthz",
					OperationId: "APIServerServiceHealthz",
					Parameters:  []*openapi.PathParameters{},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.Empty"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
		},
		Components: &openapi.OpenAPIComponents{
			SecuritySchemes: &openapi.SecuritySchemes{},
			Schemas: map[string]*openapi.Model{
				"v1.Empty": &openapi.Model{
					Type:       "object",
					Properties: map[string]*openapi.Schema{},
				},
				"v1.IPRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"addr": &openapi.Schema{
							Type: "string",
						},
					},
				},
			},
		},
	}
}

// Client API for APIServerService service
// +gen:openapi
type APIServerService interface {
	// +gen:get=/api/v1/healthz
	Healthz(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	// +gen:get=/api/v1/getIP
	GetIP(ctx context.Context, in *Empty, opts ...client.CallOption) (*IPRsp, error)
}

type aPIServerService struct {
	c    client.Client
	name string
}

func NewAPIServerService(name string, c client.Client) APIServerService {
	return &aPIServerService{
		c:    c,
		name: name,
	}
}

func (c *aPIServerService) Healthz(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "APIServerService.Healthz", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServerService) GetIP(ctx context.Context, in *Empty, opts ...client.CallOption) (*IPRsp, error) {
	req := c.c.NewRequest(c.name, "APIServerService.GetIP", in)
	out := new(IPRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APIServerService service
// +gen:openapi
type APIServerServiceHandler interface {
	// +gen:get=/api/v1/healthz
	Healthz(context.Context, *Empty, *Empty) error
	// +gen:get=/api/v1/getIP
	GetIP(context.Context, *Empty, *IPRsp) error
}

func RegisterAPIServerServiceHandler(s server.Server, hdlr APIServerServiceHandler, opts ...server.HandlerOption) error {
	type aPIServerServiceImpl interface {
		Healthz(ctx context.Context, in *Empty, out *Empty) error
		GetIP(ctx context.Context, in *Empty, out *IPRsp) error
	}
	type APIServerService struct {
		aPIServerServiceImpl
	}
	h := &aPIServerServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "APIServerService.Healthz",
		Description: "APIServerService.Healthz",
		Path:        []string{"/api/v1/healthz"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "APIServerService.GetIP",
		Description: "APIServerService.GetIP",
		Path:        []string{"/api/v1/getIP"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, server.OpenAPIHandler(NewAPIServerServiceOpenAPI()))
	return s.Handle(s.NewHandler(&APIServerService{h}, opts...))
}

type aPIServerServiceHandler struct {
	APIServerServiceHandler
}

func (h *aPIServerServiceHandler) Healthz(ctx context.Context, in *Empty, out *Empty) error {
	return h.APIServerServiceHandler.Healthz(ctx, in, out)
}

func (h *aPIServerServiceHandler) GetIP(ctx context.Context, in *Empty, out *IPRsp) error {
	return h.APIServerServiceHandler.GetIP(ctx, in, out)
}

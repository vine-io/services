// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/vine-io/services/proto/service/apiserver/v1/apiserver.proto

package apiserverv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	client "github.com/vine-io/vine/core/client"
	server "github.com/vine-io/vine/core/server"
	api "github.com/vine-io/vine/lib/api"
	apipb "github.com/vine-io/vine/proto/apis/api"
	openapi "github.com/vine-io/vine/proto/apis/openapi"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for ApiserverService service
func NewApiserverServiceEndpoints() []*apipb.Endpoint {
	return []*apipb.Endpoint{
		&apipb.Endpoint{
			Name:        "ApiserverService.Call",
			Description: "ApiserverService.Call",
			Path:        []string{"/apiserver/v1/apiserver/Call"},
			Method:      []string{"POST"},
			Body:        "*",
			Handler:     "rpc",
		},
	}
}

// Swagger OpenAPI 3.0 for ApiserverService service
func NewApiserverServiceOpenAPI() *openapi.OpenAPI {
	return &openapi.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapi.OpenAPIInfo{
			Title:       "ApiserverServiceService",
			Description: "OpenAPI3.0 for ApiserverService",
			Version:     "v1.0.0",
		},
		Servers: []*openapi.OpenAPIServer{},
		Tags: []*openapi.OpenAPITag{
			&openapi.OpenAPITag{
				Name:        "ApiserverService",
				Description: "OpenAPI3.0 for ApiserverService",
			},
		},
		Paths: map[string]*openapi.OpenAPIPath{
			"/apiserver/v1/apiserver/Call": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"ApiserverService"},
					Description: "ApiserverService Call",
					OperationId: "ApiserverServiceCall",
					RequestBody: &openapi.PathRequestBody{
						Description: "Call Request",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.Request",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.Response"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
		},
		Components: &openapi.OpenAPIComponents{
			SecuritySchemes: &openapi.SecuritySchemes{},
			Schemas: map[string]*openapi.Model{
				"v1.Request": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.Response": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"msg": &openapi.Schema{
							Type: "string",
						},
					},
				},
			},
		},
	}
}

// Client API for ApiserverService service
// +gen:openapi
type ApiserverService interface {
	// +gen:post=/apiserver/v1/apiserver/Call
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (ApiserverService_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (ApiserverService_PingPongService, error)
}

type apiserverService struct {
	c    client.Client
	name string
}

func NewApiserverService(name string, c client.Client) ApiserverService {
	return &apiserverService{
		c:    c,
		name: name,
	}
}

func (c *apiserverService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ApiserverService.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiserverService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (ApiserverService_StreamService, error) {
	req := c.c.NewRequest(c.name, "ApiserverService.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &apiserverServiceStream{stream}, nil
}

type ApiserverService_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type apiserverServiceStream struct {
	stream client.Stream
}

func (x *apiserverServiceStream) Close() error {
	return x.stream.Close()
}

func (x *apiserverServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *apiserverServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *apiserverServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *apiserverServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiserverService) PingPong(ctx context.Context, opts ...client.CallOption) (ApiserverService_PingPongService, error) {
	req := c.c.NewRequest(c.name, "ApiserverService.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &apiserverServicePingPong{stream}, nil
}

type ApiserverService_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type apiserverServicePingPong struct {
	stream client.Stream
}

func (x *apiserverServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *apiserverServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *apiserverServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *apiserverServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *apiserverServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *apiserverServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ApiserverService service
// +gen:openapi
type ApiserverServiceHandler interface {
	// +gen:post=/apiserver/v1/apiserver/Call
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, ApiserverService_StreamStream) error
	PingPong(context.Context, ApiserverService_PingPongStream) error
}

func RegisterApiserverServiceHandler(s server.Server, hdlr ApiserverServiceHandler, opts ...server.HandlerOption) error {
	type apiserverServiceImpl interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type ApiserverService struct {
		apiserverServiceImpl
	}
	h := &apiserverServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "ApiserverService.Call",
		Description: "ApiserverService.Call",
		Path:        []string{"/apiserver/v1/apiserver/Call"},
		Method:      []string{"POST"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, server.OpenAPIHandler(NewApiserverServiceOpenAPI()))
	return s.Handle(s.NewHandler(&ApiserverService{h}, opts...))
}

type apiserverServiceHandler struct {
	ApiserverServiceHandler
}

func (h *apiserverServiceHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.ApiserverServiceHandler.Call(ctx, in, out)
}

func (h *apiserverServiceHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ApiserverServiceHandler.Stream(ctx, m, &apiserverServiceStreamStream{stream})
}

type ApiserverService_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type apiserverServiceStreamStream struct {
	stream server.Stream
}

func (x *apiserverServiceStreamStream) Close() error {
	return x.stream.Close()
}

func (x *apiserverServiceStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *apiserverServiceStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *apiserverServiceStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *apiserverServiceStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *apiserverServiceHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.ApiserverServiceHandler.PingPong(ctx, &apiserverServicePingPongStream{stream})
}

type ApiserverService_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type apiserverServicePingPongStream struct {
	stream server.Stream
}

func (x *apiserverServicePingPongStream) Close() error {
	return x.stream.Close()
}

func (x *apiserverServicePingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *apiserverServicePingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *apiserverServicePingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *apiserverServicePingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *apiserverServicePingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
